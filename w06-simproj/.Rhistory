sim1_sigma3$full_pval[i] = pf(summary(full_mod)$fstatistic[[1]], 3, 21, lower.tail=FALSE)
sim1_sigma3$full_rsq[i] = summary(full_mod)$r.squared
study1$y = 3 + epsilon
red_mod = lm(y ~ x1 + x2 + x3, data=study1)
sim1_sigma3$red_ftest[i] = summary(red_mod)$fstatistic[[1]]
sim1_sigma3$red_pval[i] = pf(summary(red_mod)$fstatistic[[1]], 3, 21, lower.tail=FALSE)
sim1_sigma3$red_rsq[i] = summary(red_mod)$r.squared
}
##BEGIN PLOTTING CODE
##Sigma = 1##
#F Statistic Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma1$full_ftest,
main = 'Significant F Stat - Sigma = 1',
border = 'grey',
xlab = 'Significant F Stat',
prob = TRUE,
breaks=50
)
x = sim1_sigma1$full_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
hist(
sim1_sigma1$red_ftest,
main = 'Insignificant F Stat - Sigma = 1',
border = 'grey',
xlab = 'Insignificant F Stat',
prob = TRUE
)
x = sim1_sigma1$red_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
#P-Value Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma1$full_pval,
main = 'Significant P-Value - Sigma = 1',
border = 'grey',
xlab = 'Significant P-Value',
prob = TRUE
)
x = sim1_sigma1$full_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma1$red_pval,
main = 'Insignificant P-Value - Sigma = 1',
border = 'grey',
xlab = 'Insignificant P-Value',
prob = TRUE
)
x = sim1_sigma1$red_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
#R-Squared Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma1$full_rsq,
main = 'Significant R^2 - Sigma = 1',
border = 'grey',
xlab = 'Significant R^2',
prob = TRUE
)
x = sim1_sigma1$full_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma1$red_rsq,
main = 'Insignificant R^2 - Sigma = 1',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE
)
x = sim1_sigma1$red_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
##Sigma = 5##
#F Statistic Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma2$full_ftest,
main = 'Significant F Stat - Sigma = 5',
border = 'grey',
xlab = 'Significant F Stat',
prob = TRUE
)
x = sim1_sigma2$full_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
hist(
sim1_sigma2$red_ftest,
main = 'Insignificant F Stat - Sigma = 5',
border = 'grey',
xlab = 'Insignificant F Stat',
prob = TRUE
)
x = sim1_sigma2$red_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
#P-Value Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma2$full_pval,
main = 'Significant P-Value - Sigma = 5',
border = 'grey',
xlab = 'Significant P-Value',
prob = TRUE
)
x = sim1_sigma2$full_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma2$red_pval,
main = 'Insignificant P-Value - Sigma = 5',
border = 'grey',
xlab = 'Insignificant P-Value',
prob = TRUE
)
x = sim1_sigma2$red_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
#R-Squared Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma2$full_rsq,
main = 'Significant R^2 - Sigma = 5',
border = 'grey',
xlab = 'Significant R^2',
prob = TRUE
)
x = sim1_sigma2$full_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma2$red_rsq,
main = 'Insignificant R^2 - Sigma = 5',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE
)
x = sim1_sigma2$red_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
##Sigma = 10##
#F Statistic Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma3$full_ftest,
main = 'Significant F Stat - Sigma = 10',
border = 'grey',
xlab = 'Significant F Stat',
prob = TRUE
)
x = sim1_sigma3$full_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
hist(
sim1_sigma3$red_ftest,
main = 'Insignificant F Stat - Sigma = 10',
border = 'grey',
xlab = 'Insignificant F Stat',
prob = TRUE
)
x = sim1_sigma3$red_ftest
curve(df(x, 3, 2496), col = 'blue', add = TRUE, lwd = 3)
#P-Value Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma3$full_pval,
main = 'Significant P-Value - Sigma = 10',
border = 'grey',
xlab = 'Significant P-Value',
prob = TRUE
)
x = sim1_sigma3$full_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma3$red_pval,
main = 'Insignificant P-Value - Sigma = 10',
border = 'grey',
xlab = 'Insignificant P-Value',
prob = TRUE
)
x = sim1_sigma3$red_pval
curve(dunif(x), col='blue', add=TRUE, lwd=3)
#R-Squared Distributions#
par(mfrow = c(1, 2))
hist(
sim1_sigma3$full_rsq,
main = 'Significant R^2 - Sigma = 10',
border = 'grey',
xlab = 'Significant R-Squared',
prob = TRUE
)
x = sim1_sigma3$full_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma3$red_rsq,
main = 'Insignificant R^2 - Sigma = 10',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE
)
x = sim1_sigma3$red_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma3$red_rsq,
main = 'Insignificant R^2 - Sigma = 10',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE,
breaks = 50
)
x = sim1_sigma3$red_rsq
curve(dbeta(x, 3/2, 2496/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma3$red_rsq,
main = 'Insignificant R^2 - Sigma = 10',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE,
breaks = 50
)
x = sim1_sigma3$red_rsq
curve(dbeta(x, 3/2, 21/2), col='blue', add=TRUE, lwd=3)
hist(
sim1_sigma3$red_rsq,
main = 'Insignificant R^2 - Sigma = 10',
border = 'grey',
xlab = 'Insignificant R^2',
prob = TRUE
)
x = sim1_sigma3$red_rsq
curve(dbeta(x, 3/2, 21/2), col='blue', add=TRUE, lwd=3)
library(readr)
sim2_data = read_csv("study_2.csv")
length(sim2_data$y)
test = as.vector(sim2_data)
View(test)
?sample
rmse_sig1 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),)
rmse_sig1 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),)
rmse_sig1 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_trn = rep(0, 1000),)
?elif
?elseif
library(readr)
sim2_data = read_csv("study_2.csv")
set.seed(19981127)#set seed for reproducable results
sigmas = c(1, 2, 4)#define sigma values for each simulation
n = 500 #sample size
rmse = function(actual, fitted) {
sqrt(sum((actual - fitted)^2) / length((actual)))
}
rmse_sig1 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_tst = rep(0, 1000),
mod3_trn = rep(0, 1000),
mod3_tst = rep(0, 1000),
mod4_trn = rep(0, 1000),
mod4_tst = rep(0, 1000),
mod5_trn = rep(0, 1000),
mod5_tst = rep(0, 1000),
mod6_trn = rep(0, 1000),
mod6_tst = rep(0, 1000),
mod7_trn = rep(0, 1000),
mod7_tst = rep(0, 1000),
mod8_trn = rep(0, 1000),
mod8_tst = rep(0, 1000),
mod9_trn = rep(0, 1000),
mod9_tst = rep(0, 1000)
)
rmse_sig2 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_tst = rep(0, 1000),
mod3_trn = rep(0, 1000),
mod3_tst = rep(0, 1000),
mod4_trn = rep(0, 1000),
mod4_tst = rep(0, 1000),
mod5_trn = rep(0, 1000),
mod5_tst = rep(0, 1000),
mod6_trn = rep(0, 1000),
mod6_tst = rep(0, 1000),
mod7_trn = rep(0, 1000),
mod7_tst = rep(0, 1000),
mod8_trn = rep(0, 1000),
mod8_tst = rep(0, 1000),
mod9_trn = rep(0, 1000),
mod9_tst = rep(0, 1000)
)
rmse_sig3 = data.frame(
mod1_trn = rep(0, 1000),
mod1_tst = rep(0, 1000),
mod2_trn = rep(0, 1000),
mod2_tst = rep(0, 1000),
mod3_trn = rep(0, 1000),
mod3_tst = rep(0, 1000),
mod4_trn = rep(0, 1000),
mod4_tst = rep(0, 1000),
mod5_trn = rep(0, 1000),
mod5_tst = rep(0, 1000),
mod6_trn = rep(0, 1000),
mod6_tst = rep(0, 1000),
mod7_trn = rep(0, 1000),
mod7_tst = rep(0, 1000),
mod8_trn = rep(0, 1000),
mod8_tst = rep(0, 1000),
mod9_trn = rep(0, 1000),
mod9_tst = rep(0, 1000)
)
##BEGIN SIMULATION
for (sig in sigmas) {
for (i in 1:1000) {
epsilon = rnorm(n, 0, sig)#generate error terms
sim2_data$y = 0 + 5*sim2_data$x1 + -4*sim2_data$x2 + 1.6*sim2_data$x3 + -1.1*sim2_data$x4 + .7*sim2_data$x5
+.3*sim2_data$x6 + epsilon #generate y
train_idx = sample(1:nrow(sim2_data), 250)#create train index
train = sim2_data[train_idx,]#set train to be data containing all columns and only rows in train index
test = sim2_data[-train_idx,]#set test data to be all other data
#start model creation
mod1 = lm(y ~ x1, data = train)
mod2 = lm(y ~ x1 + x2, data = train)
mod3 = lm(y ~ x1 + x2 + x3, data = train)
mod4 = lm(y ~ x1 + x2 + x3 + x4, data = train)
mod5 = lm(y ~ x1 + x2 + x3 + x4 + x5, data = train)
mod6 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data = train)#TRUE model
mod7 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data = train)
mod8 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, data = train)
mod9 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = train)
#calculate rmse for train and test data on each model
if (sig == 1) {
rmse_sig1$mod1_trn = rmse(sim2_data$y, mod1$fitted)
rmse_sig1$mod1_tst = rmse(sim2_data$y, predict(mod1, test))
rmse_sig1$mod2_trn = rmse(sim2_data$y, mod2$fitted)
rmse_sig1$mod2_tst = rmse(sim2_data$y, predict(mod2, test))
rmse_sig1$mod3_trn = rmse(sim2_data$y, mod3$fitted)
rmse_sig1$mod3_tst = rmse(sim2_data$y, predict(mod3, test))
rmse_sig1$mod4_trn = rmse(sim2_data$y, mod4$fitted)
rmse_sig1$mod4_tst = rmse(sim2_data$y, predict(mod4, test))
rmse_sig1$mod5_trn = rmse(sim2_data$y, mod5$fitted)
rmse_sig1$mod5_tst = rmse(sim2_data$y, predict(mod5, test))
rmse_sig1$mod6_trn = rmse(sim2_data$y, mod6$fitted)
rmse_sig1$mod6_tst = rmse(sim2_data$y, predict(mod6, test))
rmse_sig1$mod7_trn = rmse(sim2_data$y, mod7$fitted)
rmse_sig1$mod7_tst = rmse(sim2_data$y, predict(mod7, test))
rmse_sig1$mod8_trn = rmse(sim2_data$y, mod8$fitted)
rmse_sig1$mod8_tst = rmse(sim2_data$y, predict(mod8, test))
rmse_sig1$mod9_trn = rmse(sim2_data$y, mod9$fitted)
rmse_sig1$mod9_tst = rmse(sim2_data$y, predict(mod9, test))
}
if (sig == 2) {
rmse_sig2$mod1_trn = rmse(sim2_data$y, mod1$fitted)
rmse_sig2$mod1_tst = rmse(sim2_data$y, predict(mod1, test))
rmse_sig2$mod2_trn = rmse(sim2_data$y, mod2$fitted)
rmse_sig2$mod2_tst = rmse(sim2_data$y, predict(mod2, test))
rmse_sig2$mod3_trn = rmse(sim2_data$y, mod3$fitted)
rmse_sig2$mod3_tst = rmse(sim2_data$y, predict(mod3, test))
rmse_sig2$mod4_trn = rmse(sim2_data$y, mod4$fitted)
rmse_sig2$mod4_tst = rmse(sim2_data$y, predict(mod4, test))
rmse_sig2$mod5_trn = rmse(sim2_data$y, mod5$fitted)
rmse_sig2$mod5_tst = rmse(sim2_data$y, predict(mod5, test))
rmse_sig2$mod6_trn = rmse(sim2_data$y, mod6$fitted)
rmse_sig2$mod6_tst = rmse(sim2_data$y, predict(mod6, test))
rmse_sig2$mod7_trn = rmse(sim2_data$y, mod7$fitted)
rmse_sig2$mod7_tst = rmse(sim2_data$y, predict(mod7, test))
rmse_sig2$mod8_trn = rmse(sim2_data$y, mod8$fitted)
rmse_sig2$mod8_tst = rmse(sim2_data$y, predict(mod8, test))
rmse_sig2$mod9_trn = rmse(sim2_data$y, mod9$fitted)
rmse_sig2$mod9_tst = rmse(sim2_data$y, predict(mod9, test))
}
else {
rmse_sig3$mod1_trn = rmse(sim2_data$y, mod1$fitted)
rmse_sig3$mod1_tst = rmse(sim2_data$y, predict(mod1, test))
rmse_sig3$mod2_trn = rmse(sim2_data$y, mod2$fitted)
rmse_sig3$mod2_tst = rmse(sim2_data$y, predict(mod2, test))
rmse_sig3$mod3_trn = rmse(sim2_data$y, mod3$fitted)
rmse_sig3$mod3_tst = rmse(sim2_data$y, predict(mod3, test))
rmse_sig3$mod4_trn = rmse(sim2_data$y, mod4$fitted)
rmse_sig3$mod4_tst = rmse(sim2_data$y, predict(mod4, test))
rmse_sig3$mod5_trn = rmse(sim2_data$y, mod5$fitted)
rmse_sig3$mod5_tst = rmse(sim2_data$y, predict(mod5, test))
rmse_sig3$mod6_trn = rmse(sim2_data$y, mod6$fitted)
rmse_sig3$mod6_tst = rmse(sim2_data$y, predict(mod6, test))
rmse_sig3$mod7_trn = rmse(sim2_data$y, mod7$fitted)
rmse_sig3$mod7_tst = rmse(sim2_data$y, predict(mod7, test))
rmse_sig3$mod8_trn = rmse(sim2_data$y, mod8$fitted)
rmse_sig3$mod8_tst = rmse(sim2_data$y, predict(mod8, test))
rmse_sig3$mod9_trn = rmse(sim2_data$y, mod9$fitted)
rmse_sig3$mod9_tst = rmse(sim2_data$y, predict(mod9, test))
}
}
}
View(rmse_sig1)
##BEGIN SIMULATION
for (sig in sigmas) {
for (i in 1:1000) {
epsilon = rnorm(n, 0, sig)#generate error terms
sim2_data$y = 0 + 5*sim2_data$x1 + -4*sim2_data$x2 + 1.6*sim2_data$x3 + -1.1*sim2_data$x4 + .7*sim2_data$x5
+.3*sim2_data$x6 + epsilon #generate y
train_idx = sample(1:nrow(sim2_data), 250)#create train index
train = sim2_data[train_idx,]#set train to be data containing all columns and only rows in train index
test = sim2_data[-train_idx,]#set test data to be all other data
#start model creation
mod1 = lm(y ~ x1, data = train)
mod2 = lm(y ~ x1 + x2, data = train)
mod3 = lm(y ~ x1 + x2 + x3, data = train)
mod4 = lm(y ~ x1 + x2 + x3 + x4, data = train)
mod5 = lm(y ~ x1 + x2 + x3 + x4 + x5, data = train)
mod6 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6, data = train)#TRUE model
mod7 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7, data = train)
mod8 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8, data = train)
mod9 = lm(y ~ x1 + x2 + x3 + x4 + x5 + x6 + x7 + x8 + x9, data = train)
#calculate rmse for train and test data on each model
if (sig == 1) {
rmse_sig1$mod1_trn[i] = rmse(sim2_data$y, mod1$fitted)
rmse_sig1$mod1_tst[i] = rmse(sim2_data$y, predict(mod1, test))
rmse_sig1$mod2_trn[i] = rmse(sim2_data$y, mod2$fitted)
rmse_sig1$mod2_tst[i] = rmse(sim2_data$y, predict(mod2, test))
rmse_sig1$mod3_trn[i] = rmse(sim2_data$y, mod3$fitted)
rmse_sig1$mod3_tst[i] = rmse(sim2_data$y, predict(mod3, test))
rmse_sig1$mod4_trn[i] = rmse(sim2_data$y, mod4$fitted)
rmse_sig1$mod4_tst[i] = rmse(sim2_data$y, predict(mod4, test))
rmse_sig1$mod5_trn[i] = rmse(sim2_data$y, mod5$fitted)
rmse_sig1$mod5_tst[i] = rmse(sim2_data$y, predict(mod5, test))
rmse_sig1$mod6_trn[i] = rmse(sim2_data$y, mod6$fitted)
rmse_sig1$mod6_tst[i] = rmse(sim2_data$y, predict(mod6, test))
rmse_sig1$mod7_trn[i] = rmse(sim2_data$y, mod7$fitted)
rmse_sig1$mod7_tst[i] = rmse(sim2_data$y, predict(mod7, test))
rmse_sig1$mod8_trn[i] = rmse(sim2_data$y, mod8$fitted)
rmse_sig1$mod8_tst[i] = rmse(sim2_data$y, predict(mod8, test))
rmse_sig1$mod9_trn[i] = rmse(sim2_data$y, mod9$fitted)
rmse_sig1$mod9_tst[i] = rmse(sim2_data$y, predict(mod9, test))
}
if (sig == 2) {
rmse_sig2$mod1_trn[i] = rmse(sim2_data$y, mod1$fitted)
rmse_sig2$mod1_tst[i] = rmse(sim2_data$y, predict(mod1, test))
rmse_sig2$mod2_trn[i] = rmse(sim2_data$y, mod2$fitted)
rmse_sig2$mod2_tst[i] = rmse(sim2_data$y, predict(mod2, test))
rmse_sig2$mod3_trn[i] = rmse(sim2_data$y, mod3$fitted)
rmse_sig2$mod3_tst[i] = rmse(sim2_data$y, predict(mod3, test))
rmse_sig2$mod4_trn[i] = rmse(sim2_data$y, mod4$fitted)
rmse_sig2$mod4_tst[i] = rmse(sim2_data$y, predict(mod4, test))
rmse_sig2$mod5_trn[i] = rmse(sim2_data$y, mod5$fitted)
rmse_sig2$mod5_tst[i] = rmse(sim2_data$y, predict(mod5, test))
rmse_sig2$mod6_trn[i] = rmse(sim2_data$y, mod6$fitted)
rmse_sig2$mod6_tst[i] = rmse(sim2_data$y, predict(mod6, test))
rmse_sig2$mod7_trn[i] = rmse(sim2_data$y, mod7$fitted)
rmse_sig2$mod7_tst[i] = rmse(sim2_data$y, predict(mod7, test))
rmse_sig2$mod8_trn[i] = rmse(sim2_data$y, mod8$fitted)
rmse_sig2$mod8_tst[i] = rmse(sim2_data$y, predict(mod8, test))
rmse_sig2$mod9_trn[i] = rmse(sim2_data$y, mod9$fitted)
rmse_sig2$mod9_tst[i] = rmse(sim2_data$y, predict(mod9, test))
}
else {
rmse_sig3$mod1_trn[i] = rmse(sim2_data$y, mod1$fitted)
rmse_sig3$mod1_tst[i] = rmse(sim2_data$y, predict(mod1, test))
rmse_sig3$mod2_trn[i] = rmse(sim2_data$y, mod2$fitted)
rmse_sig3$mod2_tst[i] = rmse(sim2_data$y, predict(mod2, test))
rmse_sig3$mod3_trn[i] = rmse(sim2_data$y, mod3$fitted)
rmse_sig3$mod3_tst[i] = rmse(sim2_data$y, predict(mod3, test))
rmse_sig3$mod4_trn[i] = rmse(sim2_data$y, mod4$fitted)
rmse_sig3$mod4_tst[i] = rmse(sim2_data$y, predict(mod4, test))
rmse_sig3$mod5_trn[i] = rmse(sim2_data$y, mod5$fitted)
rmse_sig3$mod5_tst[i] = rmse(sim2_data$y, predict(mod5, test))
rmse_sig3$mod6_trn[i] = rmse(sim2_data$y, mod6$fitted)
rmse_sig3$mod6_tst[i] = rmse(sim2_data$y, predict(mod6, test))
rmse_sig3$mod7_trn[i] = rmse(sim2_data$y, mod7$fitted)
rmse_sig3$mod7_tst[i] = rmse(sim2_data$y, predict(mod7, test))
rmse_sig3$mod8_trn[i] = rmse(sim2_data$y, mod8$fitted)
rmse_sig3$mod8_tst[i] = rmse(sim2_data$y, predict(mod8, test))
rmse_sig3$mod9_trn[i] = rmse(sim2_data$y, mod9$fitted)
rmse_sig3$mod9_tst[i] = rmse(sim2_data$y, predict(mod9, test))
}
}
}
View(rmse_sig1)
mean(rmse_sig1$mod1_trn)
mean(rmse_sig1$mod2_trn)
mean(rmse_sig1$mod3_trn)
mean(rmse_sig1$mod4_trn)
mean(rmse_sig1$mod5_trn)
mean(rmse_sig1$mod6_trn)
mean(rmse_sig1$mod7_trn)
mean(rmse_sig1$mod8_trn)
mean(rmse_sig1$mod9_trn)
mean(rmse_sig1$mod6_tst)
mean(rmse_sig1$mod1_tst)
mean(rmse_sig3$mod6_tst)
View(sim1_sigma3)
View(rmse_sig3)
?sample
View(train)
View(sim2_data)
